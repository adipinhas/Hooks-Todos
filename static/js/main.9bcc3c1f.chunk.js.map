{"version":3,"sources":["Hooks/UseFormHook.jsx","cmps/Edit.jsx","cmps/Todo.jsx","cmps/TodoList.jsx","cmps/TodoForm.jsx","cmps/TodoApp.jsx","App.js","serviceWorker.js","index.js"],"names":["initialVal","useState","value","setValue","e","target","Edit","props","UseTodoHook","input","handleChange","reset","doneEditing","preventDefault","style","marginLeft","display","justifyContent","onSubmit","TextField","onChange","autoFocus","Button","margin","onClick","color","variant","Todo","isEditing","setIsEditing","ListItem","height","ListItemText","todo","task","id","toggleTodo","checked","completed","textDecoration","IconButton","remove","TodoList","todos","length","Paper","List","map","Divider","TodoForm","handleSubmit","addTodo","alignItems","marginRight","label","TodoApp","initialTodos","JSON","parse","localStorage","getItem","setTodos","useEffect","setItem","stringify","backgroundColor","width","padding","elevation","AppBar","position","Typography","Grid","container","justify","item","xs","md","lg","inputValue","uuid","updatedTodos","todoId","filter","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9bcc3c1f.chunk.js","sourcesContent":["import {useState} from 'react'\r\nexport default initialVal=>{\r\n    \r\n    const [value, setValue] = useState(initialVal);\r\n    const handleChange=(e)=>{\r\n        setValue(e.target.value)\r\n    }\r\n    const reset=()=>{\r\n        setValue('')\r\n    }\r\n    return[value,handleChange,reset]\r\n}","import React from 'react'\r\nimport UseTodoHook from '../Hooks/UseFormHook'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\n\r\nfunction Edit(props) {\r\n    const [input, handleChange,reset] = UseTodoHook(props.input);\r\n    const doneEditing=(e)=>{\r\n            e.preventDefault()\r\n            props.doneEditing(input)\r\n            reset()\r\n        }\r\n  \r\n    return (\r\n    <div>\r\n        <form style={{marginLeft:\"1rem\", display:\"flex\", justifyContent:\"space-between\"}} onSubmit={doneEditing}>\r\n            <TextField \r\n            \r\n                value={input}\r\n                onChange={handleChange}\r\n                autoFocus\r\n            />\r\n            <Button style={{margin:\"5px\"}} onClick={doneEditing} color=\"primary\" variant=\"outlined\">save</Button>\r\n        </form>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Edit\r\n","import React, {useState} from 'react'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport CheckBox from '@material-ui/core/Checkbox'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport Edit from './Edit'\r\n\r\n\r\nfunction Todo(props) {\r\n    const [isEditing, setIsEditing] = useState(false);\r\n    \r\n    const handleRemove=()=>{\r\n        props.remove(props.todo.id)\r\n    }\r\n    const handleToggleTodo=()=>{\r\n        props.toggleTodo(props.todo.id)\r\n    }\r\n    const handleEdit=()=>{\r\n        setIsEditing(true)\r\n    }\r\n    const doneEditing=(input)=>{\r\n       \r\n        setIsEditing(false)\r\n        props.doneEditing(props.todo.id,input)\r\n    }\r\n    return (\r\n        <div> <ListItem style={{height:\"60px\"}}>\r\n            {isEditing ?<ListItemText>\r\n                     <Edit input={props.todo.task} doneEditing={doneEditing}/>\r\n            </ListItemText> : (<>\r\n\r\n                <CheckBox onClick={handleToggleTodo} checked={props.todo.completed}></CheckBox>\r\n                    <ListItemText style={{textDecoration: props.todo.completed ? \"line-through\" : \"none\"}}>\r\n                    {props.todo.task}\r\n                    </ListItemText>\r\n                    <IconButton onClick={handleRemove}>\r\n                        <DeleteIcon ></DeleteIcon>\r\n                    </IconButton>\r\n                    <IconButton>\r\n                        <EditIcon onClick={handleEdit}></EditIcon>\r\n                    </IconButton>\r\n                    </>\r\n            )}\r\n                </ListItem>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","import React from 'react'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport List from '@material-ui/core/List'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport Todo from './Todo'\r\n\r\n\r\n\r\nfunction TodoList(props) {\r\n  if(props.todos.length)\r\n    return (\r\n        <Paper>\r\n            <List>\r\n            {props.todos.map((todo)=>{\r\n                return<> \r\n                        <Todo doneEditing={props.doneEditing} toggleTodo={props.toggleTodo} remove={props.remove} todo={todo}></Todo>\r\n                    <Divider/>\r\n                    </>\r\n               \r\n            })}\r\n            </List>\r\n        </Paper>\r\n    )\r\n    return null\r\n}\r\n\r\nexport default TodoList\r\n","import React from 'react'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport UseTodoHook from '../Hooks/UseFormHook'\r\nimport Button from '@material-ui/core/Button';\r\n\r\nfunction TodoForm(props) {\r\n    const [value,handleChange,reset]=UseTodoHook('')\r\n    const handleSubmit=(e)=>{\r\n        e.preventDefault()\r\n        props.addTodo(value)\r\n        reset()\r\n    }\r\n    return (<Paper style={{margin:\"1rem 0 1rem 0\"}}>\r\n        <form style={{display: \"flex\", justifyContent:\"space-between\",alignItems:\"center\", marginLeft:\"1.5rem\",marginRight:\"1.5rem\"}}\r\n   onSubmit={handleSubmit} >\r\n            <TextField label=\"Add New Task\" margin=\"normal\"   value={value} onChange={handleChange}></TextField>\r\n            <Button style={{margin:\"5px\",height:\"fit-content\"}} onClick={handleSubmit} color=\"primary\" variant=\"outlined\">save</Button>\r\n        </form>\r\n    </Paper>\r\n    )\r\n}\r\n\r\nexport default TodoForm\r\n","import React ,{ useState,useEffect } from 'react'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport ToolBar from '@material-ui/core/Toolbar'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport List from './TodoList'\r\nimport TodoForm from './TodoForm'\r\nimport uuid from 'uuid'\r\nfunction TodoApp() {\r\n    const initialTodos=JSON.parse(localStorage.getItem(\"todos\") ||\"[]\")\r\n    \r\n    const [todos, setTodos] = useState(initialTodos);\r\n    const addTodo= (inputValue)=>{\r\n        setTodos([...todos,{id:uuid(),task:inputValue,completed:false}])\r\n    }\r\n    useEffect(()=>{\r\n        localStorage.setItem(\"todos\",JSON.stringify(todos))\r\n    })\r\n    const removeTodo=(todoId)=>{\r\n        const updatedTodos=todos.filter((todo)=>{\r\n            return todo.id!==todoId\r\n        })\r\n        setTodos(updatedTodos)\r\n    }\r\n    const toggleTodo=(todoId)=>{\r\n        const updatedTodos =todos.map((todo)=>{\r\n             return todo.id===todoId ? {...todo,completed:!todo.completed} : todo\r\n        })\r\n        setTodos(updatedTodos)\r\n    }\r\n        const doneEditing=(id,value)=>{\r\n        const updatedTodos =todos.map((todo)=>{\r\n            return todo.id===id ? {...todo,task:value} : todo\r\n       })\r\n       setTodos(updatedTodos)\r\n        \r\n    }\r\n    return (\r\n        <div>\r\n          <Paper style={{\r\n            backgroundColor:'#f5f5fa',\r\n            width:'100vw',\r\n            height:'100vh',margin:0,\r\n            padding:0}}\r\n            elevation={0}>\r\n              <AppBar position=\"static\" style={{height:'75px'}}>\r\n                  <ToolBar>\r\n                  <Typography >\r\n                      Hooks Todo-List!!!!!!!!!!!!!!\r\n                  </Typography>\r\n                  </ToolBar>\r\n              </AppBar>\r\n              <Grid container justify=\"center\">\r\n                  <Grid item xs={11} md={6} lg={5}>\r\n\r\n              <TodoForm addTodo={addTodo}/>\r\n              <List doneEditing={doneEditing} toggleTodo={toggleTodo} remove={removeTodo} todos={todos}/>\r\n                  </Grid>\r\n              </Grid>\r\n\r\n          </Paper>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoApp\r\n","import React from 'react';\nimport './App.css';\nimport TodoApp from './cmps/TodoApp'\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TodoApp></TodoApp>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}